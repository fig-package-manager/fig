name: tebako

on:
  push:
    paths-ignore:
      - 'doc/**'
  workflow_dispatch:

# Ensure we don't run duplicate workflows
concurrency:
  group: '${{ github.workflow }}-${{ github.ref_name }}'
  cancel-in-progress: true

env:
  BUNDLER_VER: 2.6.1
  RUBYGEMS_VER: 3.6.1
  RUBY_VER: 3.3.7

jobs:
  # build the gem
  # ideally we get this from build-and-test so that we package what we tested
  build-gem:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VER }}
          bundler: ${{ env.BUNDLER_VER }}
          rubygems: ${{ env.RUBYGEMS_VER }}
          bundler-cache: false
          
      - name: Install dependencies
        run: bundle install --no-cache
        
      - name: Build gem
        run: bundler exec rake build

      - name: Upload gem for packaging
        uses: actions/upload-artifact@v4
        with:
          name: fig
          path: pkg/fig-*.gem

  # Package the gem into platform-specific executables using tebako
  tebako-package-linux:
    runs-on: ubuntu-latest
    needs: build-gem

    env:
      artifact: "fig-linux-amd64"

    steps:
      - name: Download built gem from previous job
        uses: actions/download-artifact@v4
        with:
          name: fig
          path: pkg/
        
      # Run tebako in docker (Linux)
      - name: Create executable with tebako (Linux)
        env:
          image_name: ${{ matrix.docker_image }}
        run: |
          docker run --rm \
            -v $(pwd):/workspace \
            -w /workspace \
            ghcr.io/tamatebako/tebako-ubuntu-20.04:latest \
            tebako press \
              --patchelf \
              --root=pkg \
              --entry-point=fig \
              --output=${{ env.artifact }}

      # Upload the executable as an artifact
      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact }}
          path: ${{ env.artifact }}
          retention-days: 30

  tebako-package-macos:
    needs: build-gem
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS AMD64
          - os: macos-14
            platform: macos
            artifact: fig-macos-amd64
            use_docker: false
          # macOS ARM64
          - os: macos-14
            platform: macos
            artifact: fig-macos-arm64
            use_docker: false
            env:
              ARCHFLAGS: "-arch arm64"
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Download built gem from previous job
        uses: actions/download-artifact@v4
        with:
          name: fig
          path: pkg/
        
      # Set up tebako for non-Linux platforms
      - name: Setup tebako
        uses: tamatebako/tebako/.github/actions/setup-tebako@main
        with:
          ruby_version: ${{ env.RUBY_VER }}

      # Run tebako directly (non-Linux)
      - name: Create executable with tebako
        run: |
          tebako press \
            --root=pkg \
            --entry-point=fig \
            --output=${{ matrix.artifact }}

      # Upload the executable as an artifact
      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: ${{ matrix.artifact }}
          retention-days: 30

  tebako-package-windows:
    continue-on-error: true
    runs-on: windows-2022
    needs: build-gem

    env:
      artifact: "fig-windows-amd64.exe"
      sys: "ucrt64"
      CC: "gcc"
      CXX: "g++"
      
    defaults:
      run:
        shell: msys2 {0}

    steps:
      - name: Download built gem from previous job
        uses: actions/download-artifact@v4
        with:
          name: fig
          path: pkg/

      - name: Setup MSys
        uses: msys2/setup-msys2@v2
        with:
          msystem: ucrt64
          path-type: minimal
          update: true

      # Set up tebako for non-Linux platforms
      - name: Setup tebako
        uses: tamatebako/tebako/.github/actions/setup-tebako@main
        with:
          ruby_version: ${{ env.RUBY_VER }}
          cc: ${{ env.CC }}
          cxx: ${{ env.CXX }}

      - name: Look for things we want to use
        continue-on-error: true
        run: |
          echo $env:Path
          Get-Command ruby
          Get-Command gem
          Get-Command bundle
          gem which tebako
          Get-Command tebako
          gem info yaml
        
      # Run tebako directly (non-Linux)
      - name: Create executable with tebako
        run: |
          tebako press --root=pkg --entry-point=fig --output=${{ env.artifact }}
          mv ${{ env.artifact }}.exe ${{ env.artifact }}

      # Upload the executable as an artifact
      - name: Upload executable
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.artifact }}
          path: ./${{ env.artifact }}
          retention-days: 30

  smoke-test-linux:
    needs: tebako-package-linux
    runs-on: ubuntu-latest

    container: ${{ matrix.target_os }}

    strategy:
      fail-fast: false
      matrix:
        target_os:
          - ubuntu:20.04
          - ubuntu:22.04
          - ubuntu:24.04
          - rockylinux:9.3
        executable: [ fig-linux-amd64 ]

    defaults:
      run:
        shell: bash

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.executable }}
          path: ./

      - name: Ensure executable
        run: chmod +x ./${{ matrix.executable }}

      - name: version check
        run: ./${{ matrix.executable }} --version

      - name: help
        run: ./${{ matrix.executable }} --help

      - name: Hello World
        run: ./${{ matrix.executable }} -s GREETING=Hello -- 'echo $GREETING, World'

  smoke-test-not-linux:
    needs: [ tebako-package-macos ]
    runs-on: ${{ matrix.target_os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          - target_os: macos-14
            executable: fig-macos-amd64
          - target_os: macos-14
            executable: fig-macos-arm64
          - target_os: macos-15
            executable: fig-macos-amd64
          - target_os: macos-15
            executable: fig-macos-arm64

    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.executable }}
          path: ./

      - name: Ensure executable
        if: ${{ ! startsWith( matrix.target_os, 'windows') }}
        run: chmod +x ./${{ matrix.executable }}

      - name: version check
        run: ./${{ matrix.executable }} --version

      - name: help
        run: ./${{ matrix.executable }} --help

      - name: Hello World
        run: ./${{ matrix.executable }} -s GREETING=Hello -- 'echo $GREETING, World'

