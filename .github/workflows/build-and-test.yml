# Workflow handles both testing and publishing of the gem
# - Tests run on all branches and PRs
# - Publishing only happens on version tags
# - Manual triggers available for debugging
name: build-and-test

on:
  # Trigger on pushes to branches and version tags
  # Note: We combine branch and tag triggers to prevent double-execution
  # when pushing to a branch with an open PR
  push:
    branches: [ "*" ]
    tags: [ "v*" ]
    paths-ignore:
      - 'doc/**'
  # Only trigger specific PR events to avoid redundant runs
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [ "*" ]
    paths-ignore:
      - 'doc/**'
  # Allow manual trigger for debugging and one-off runs
  workflow_dispatch:

# Concurrency settings ensure we don't waste resources on outdated commits
# Each job gets its own group to allow parallel runs of different job types
concurrency:
  group: '${{ github.workflow }}-${{ github.job }}-${{ github.head_ref || github.ref_name }}'
  cancel-in-progress: true

# Global environment variables ensure consistent dependency versions
env:
  BUNDLER_VER: 2.6.1  # Matches production environment
  RUBYGEMS_VER: 3.6.1 # Latest stable version tested
  # Ruby versions to install in CI images - must match versions in test matrix
  CI_RUBY_VERSIONS: "3.1.2 3.3.7"  # Space-separated list of versions
  CI_DEFAULT_RUBY: "3.3.7"         # Version used by default

jobs:
  # Find all image directories dynamically
  find-image-dirs:
    runs-on: ubuntu-latest
    outputs:
      image_dirs: ${{ steps.find-dirs.outputs.dirs }}
    steps:
      - uses: actions/checkout@v3
      
      - name: Find image directories
        id: find-dirs
        run: |
          # Find all subdirectories of images/ci
          DIRS=$(find images/ci -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | jq -R -s -c 'split("\n") | map(select(length > 0))')
          echo "dirs=$DIRS" >> $GITHUB_OUTPUT
          echo "Found dirs: $DIRS"

  build-nongha-images:
    needs: find-image-dirs
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
  
    # Use dynamically generated image list
    strategy:
      matrix:
        image: ${{ fromJson(needs.find-image-dirs.outputs.image_dirs) }}
  
    steps:
      - uses: actions/checkout@v3
    
      # Check if this specific image directory has changes
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            image_changed:
              - 'images/ci/${{ matrix.image }}/**'
              - '.github/workflows/build-and-test.yml'
    
      - name: login to ghcr
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
    
      # Determine branch name
      - name: Set branch environment variables
        id: branch_env
        run: |
          BRANCH_NAME=${{ github.head_ref || github.ref_name }}
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "is_master=${{ github.ref == 'refs/heads/master' }}" >> $GITHUB_OUTPUT
    
      # Pull and retag if this image didn't change
      - name: Pull and retag master image
        id: pull_retag
        if: steps.changes.outputs.image_changed != 'true'
        run: |
          if docker pull ghcr.io/${{ github.repository }}/fig-ci:${{ matrix.image }}; then
            echo "Using master image for ${{ matrix.image }}"
            docker tag ghcr.io/${{ github.repository }}/fig-ci:${{ matrix.image }} ghcr.io/${{ github.repository }}/fig-ci:${{ matrix.image }}-${{ steps.branch_env.outputs.branch_name }}
            docker push ghcr.io/${{ github.repository }}/fig-ci:${{ matrix.image }}-${{ steps.branch_env.outputs.branch_name }}
            echo "retagged=true" >> $GITHUB_OUTPUT
          else
            echo "Master image not found for ${{ matrix.image }}, falling back to build"
            echo "retagged=false" >> $GITHUB_OUTPUT
          fi
    
      # Only build if image changed or retag failed
      - name: Build and push image
        if: steps.changes.outputs.image_changed == 'true' || steps.pull_retag.outputs.retagged != 'true'
        uses: docker/build-push-action@v4
        with:
          context: ./images/ci/${{ matrix.image }}
          push: true
          build-args: |
            RUBY_VERSIONS=${{ env.CI_RUBY_VERSIONS }}
            DEFAULT_RUBY=${{ env.CI_DEFAULT_RUBY }}
          tags: |
            ${{ steps.branch_env.outputs.is_master == 'true' && format('ghcr.io/{0}/fig-ci:{1}', github.repository, matrix.image) || '' }}
            ghcr.io/${{ github.repository }}/fig-ci:${{ matrix.image }}-${{ steps.branch_env.outputs.branch_name }}


  # Package job: Build and verify the gem
  # We only need to package once since this is a pure Ruby gem
  # Running on latest Ubuntu for consistent builds
  package:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ruby:
          - "3.1.2"  # Build with minimum supported Ruby version for widest compatibility

    steps:
      - uses: actions/checkout@v3

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}

      - run: gem update --system $RUBYGEMS_VER

      - name: Install gem dependencies
        env:
          CC: false
          LD: false
          CXX: false
        run: bundle install

      - name: Build gem
        run: bundle exec rake gem

      - name: Run tests
        env:
          FIG_SVN_EXECUTABLE: 
        run: bundle exec rake rspec

      - name: Upload gem
        uses: actions/upload-artifact@v4
        with:
          name: fig
          path: pkg/fig-*.gem

  verify-version:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Verify version matches tag
        run: |
          # Extract version from version.rb
          EMBEDDED_VERSION=$(grep -o "VERSION = '.*'" lib/fig/version.rb | cut -d"'" -f2)
          # Extract version from git tag (remove 'v' prefix)
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          
          echo "Version in version.rb: $EMBEDDED_VERSION"
          echo "Version from git tag: $TAG_VERSION"
          
          if [ "$EMBEDDED_VERSION" != "$TAG_VERSION" ]; then
            echo "::error::Version mismatch! version.rb ($EMBEDDED_VERSION) does not match git tag ($TAG_VERSION)"
            exit 1
          fi

  publish:
    needs: [package, verify-version]
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write  # needed for creating releases
      packages: write
    environment:
      name: rubygems
      url: https://rubygems.org/gems/fig

    steps:
      - uses: actions/checkout@v4

      - name: Download gem artifact
        uses: actions/download-artifact@v4
        with:
          name: fig
          path: pkg/

      - name: Get gem version
        id: gem-version
        run: |
          GEM_VERSION=$(ls pkg/*.gem | sed 's/.*-\([0-9.]\+\)\.gem/\1/')
          echo "version=${GEM_VERSION}" >> "$GITHUB_OUTPUT"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: pkg/*.gem
          name: Release v${{ steps.gem-version.outputs.version }}
          draft: false
          prerelease: false
          generate_release_notes: true

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.3.7'
          bundler: '2.6.1'
          rubygems: '3.6.1'

      - name: Publish to RubyGems
        env:
          # Using environment secrets for better security
          RUBYGEMS_API_KEY: ${{ secrets.RUBYGEMS_API_KEY }}
        run: |
          mkdir -p $HOME/.gem
          echo -e "---\n:rubygems_api_key: ${RUBYGEMS_API_KEY}" > $HOME/.gem/credentials
          chmod 0600 $HOME/.gem/credentials
          gem push pkg/*.gem
          rm -f $HOME/.gem/credentials

  compute-tag:
    runs-on: ubuntu-latest
    outputs:
      BRANCH_NAME: ${{ steps.branch_env.outputs.branch_name }}
    steps:
      - name: Set branch environment variables
        id: branch_env
        run: |
          BRANCH_NAME=${{ github.head_ref || github.ref_name }}
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          echo "is_master=${{ github.ref == 'refs/heads/master' }}" >> $GITHUB_OUTPUT

  whats-my-tag:
    needs: compute-tag
    runs-on: ubuntu-latest
    steps:
      - name: 
        run: |
          echo "branch name=${{ needs.compute-tag.outputs.BRANCH_NAME }}"
          echo "image=${{ format('ghcr.io/{0}/fig-ci:centos7.9.2009-{1}', github.repository, needs.compute-tag.outputs.BRANCH_NAME) }}"
          
# Need to figure out how to parameterize the common parts of
# these jobs and factor out only the differing parts.
  test-gem-install-nongha:
    # Enable the job
    needs: [ package, compute-tag, find-image-dirs, build-nongha-images ]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false  # Don't fail the entire matrix if one job fails
      matrix:
        image:
          - rocky8
          - rocky9
          - ubuntu20.04
        ruby-version:
          - 3.1.2
          - 3.3.7
        # use pre-built binary gems with default platform
        gem-platform:
          - default
          
        include:
          # CentOS 7.9 - build from source with --platform ruby
          - image: centos7.9.2009
            ruby-version: "3.1.2"
            gem-platform: "ruby"
          - image: centos7.9.2009
            ruby-version: "3.3.7"
            gem-platform: "ruby"

    container:
      # Use stable tag on master, branch-based tag on feature branches
      image: ${{ github.ref == 'refs/heads/master' && format('ghcr.io/{0}/fig-ci:{1}', github.repository, matrix.image) || format('ghcr.io/{0}/fig-ci:{1}-{2}', github.repository, matrix.image, needs.compute-tag.outputs.BRANCH_NAME) }}
      options: --user root

    defaults:
      run:
        shell: bash -l {0}

    steps:
      # GitHub CLI is now pre-installed in the Docker images
      - name: Authenticate GH CLI
        run: echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token

      # Download the artifact
      - name: Download with gh cli
        run: |
          # find the last run's artifacts for this workflow & job
          gh run download $GITHUB_RUN_ID --repo ${{ github.repository }} --name fig --dir ./

      - name: Install and test gem with specific Ruby version
        run: |
          # Switch to the specified Ruby version using asdf
          asdf set -u ruby ${{ matrix.ruby-version }}
          
          # Verify Ruby version
          ruby --version
          
          # Install and verify gem with appropriate platform settings
          # Set platform flag as a shell variable
          PLATFORM_FLAG=""
          PLATFORM_MSG="default platform"
          if [[ "${{ matrix.gem-platform }}" != "default" ]]; then
            PLATFORM_FLAG="--platform ${{ matrix.gem-platform }}"
            PLATFORM_MSG="platform: ${{ matrix.gem-platform }}"
          fi
          
          gem update --system $RUBYGEMS_VER
          gem install ./fig-*.gem $PLATFORM_FLAG --no-document
          echo "Installed gem with $PLATFORM_MSG"
          fig --version
          
          # Basic smoke test
          fig help

  test-gem-install-gha:
    needs: package
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false  # Don't fail the entire matrix if one job fails
      matrix:
        os:
          - ubuntu-latest
          - windows-2022
          - macos-14
        ruby:
          - "3.1.2"
          - "3.3.7"
    steps:
      - name: Download gem
        uses: actions/download-artifact@v4
        with:
          name: fig
          path: .

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}

      - run: |
          gem update --system $RUBYGEMS_VER
          gem install ./fig-*.gem --no-document
          fig --version
          
          # Basic smoke test
          fig help
          
